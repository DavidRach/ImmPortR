# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  schedule:
    - cron: "0 0 * * 0"

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest, r: 'release'}
          - {os: ubuntu-20.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - name: Install aspera
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            curl --insecure https://ak-delivery04-mul.dhe.ibm.com/sar/CMA/OSA/08q6g/0/ibm-aspera-cli-3.9.6.1467.159c5b1-linux-64-release.sh --output ~/cli.sh
            chmod +x ~/cli.sh
            ~/cli.sh
          elif [ "$RUNNER_OS" == "macOS" ]; then
            curl --insecure https://ak-delivery04-mul.dhe.ibm.com/sar/CMA/OSA/08q6l/0/ibm-aspera-cli-3.9.6.1467.159c5b1-mac-10.11-64-release.sh --output ~/cli.sh
            chmod +x ~/cli.sh
            ~/cli.sh
          elif [ "$RUNNER_OS" == "Windows" ]; then
            mkdir /c/aspera
            curl --insecure https://ak-delivery04-mul.dhe.ibm.com/sar/CMA/OSA/08rb6/0/ibm-aspera-cli-3.9.6.1471.fbf92c2-win-v140_xp-32-release.zip --output /c/aspera/cli.zip
            unzip /c/aspera/cli.zip -d /c/aspera
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi
        shell: bash

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
          remotes::install_cran("covr")
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
          ImmPortUsername: ${{ secrets.IMMPORTUSERNAME }}
          ImmPortPassword: ${{ secrets.IMMPORTPASSWORD }}
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Test coverage
        env:
          ImmPortUsername: ${{ secrets.IMMPORTUSERNAME }}
          ImmPortPassword: ${{ secrets.IMMPORTPASSWORD }}
        run: covr::codecov()
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
